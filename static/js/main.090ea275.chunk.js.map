{"version":3,"sources":["components/Square/index.js","components/Board/index.js","components/Game/index.js","components/Setup/index.js","index.js"],"names":["Square","highlight","onClick","value","className","Board","squares","winSquares","board_size","renderSquare","i","includes","renderRow","startingSlot","rowButtons","push","arrButtons","calculateWinner","game_size","Math","sqrt","length","j","pos","win_array","win_streak","winner","drawResult","next_streak","available_move","Game","gameboard_size","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","AscMovelist","setAscMovelist","current","gameStatus","moves","map","step","move","col","currentMove","row","desc","jumpTo","status","reverse","new_history","slice","concat","handleClick","Setup","gameSize","id","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.090ea275.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n/**\r\n * Square component props:\r\n * @param {boolean} highlight if Square is in win streak or not\r\n * @param {callback} onClick\r\n * @param {string} value 'X' or 'O'\r\n * @returns {JSX.Element}\r\n */\r\nconst Square = ({highlight, onClick, value}) => (\r\n     <button\r\n         className={highlight ? 'square highlight' : 'square'}\r\n         onClick={onClick}>{value}\r\n    </button>\r\n);\r\n\r\nexport default Square;","import React from \"react\";\r\nimport Square from \"../Square\";\r\n\r\n/**\r\n *\r\n * @param {array} squares on Board\r\n * @param {callback} onClick\r\n * @param {array} winSquares are Squares to be highlighted\r\n * @param {number} board_size\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nconst Board = ({squares, onClick, winSquares, board_size}) => {\r\n    const renderSquare = (i) => {\r\n        return (\r\n            <Square\r\n                value={squares[i]}\r\n                onClick={() => onClick(i)}\r\n                // Highlight if the square's current pos \"i\" is in the winSquares returned from Games\r\n                highlight={winSquares && winSquares.includes(i)}\r\n            />\r\n        );\r\n    }\r\n    const renderRow = (startingSlot) => {\r\n        let rowButtons = [];\r\n        for(let i = 0; i < board_size; ++i){\r\n            rowButtons.push(renderSquare(startingSlot + i));\r\n        }\r\n        return (\r\n            <div className=\"board-row\">\r\n                {rowButtons}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // ========================================\r\n    let arrButtons = [];\r\n    for(let i = 0; i < board_size**2; i += board_size){\r\n        arrButtons.push(renderRow(i));\r\n    }\r\n    return (\r\n        <div>\r\n            {arrButtons}\r\n        </div>\r\n    );\r\n};\r\nexport default Board;","import React, {useState} from \"react\";\r\nimport Board from \"../Board\";\r\n\r\n\r\nfunction calculateWinner(squares) {\r\n    // Check row\r\n    const game_size = Math.sqrt(squares.length);\r\n    for (let i = 0; i < game_size; i++){\r\n        for (let j = 0; j < game_size - 4; j++){\r\n            // the last 4 slot of a row cant make a 5-win streak\r\n            // so we only need to consider from pos 0 to game_size - 4 to reduce calculation\r\n            const pos = i * game_size + j;\r\n            if(squares[pos]){\r\n                let win_array = [pos];\r\n                for (let win_streak = 1; win_streak < 5; win_streak++) {\r\n                    if (squares[pos] === squares[pos + win_streak])\r\n                        win_array.push(pos + win_streak); // append next streak location\r\n                    else break;\r\n                }\r\n                if(win_array.length === 5){\r\n                    return {\r\n                        winner: squares[pos],\r\n                        drawResult: false,\r\n                        winSquares: win_array\r\n                    };\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Check columns\r\n    for (let j = 0; j < game_size - 4; j++){\r\n        // the last 4 slot of a column cant make a 5-win streak\r\n        // so we only need to consider from pos 0 to game_size - 4 to reduce calculation\r\n        for (let i = 0; i < game_size; i++){\r\n            const pos = j * game_size + i;\r\n            if(squares[pos]){\r\n                let win_array = [pos];\r\n                for (let win_streak = 1; win_streak < 5; win_streak++) {\r\n                    if (squares[pos] === squares[pos + win_streak * game_size])\r\n                        win_array.push(pos + win_streak * game_size); // append next streak location\r\n                    else break;\r\n                }\r\n                if(win_array.length === 5){\r\n                    return {\r\n                        winner: squares[pos],\r\n                        drawResult: false,\r\n                        winSquares: win_array\r\n                    };\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Check primary diagonal lines\r\n    for (let pos = 0; pos < squares.length; pos++){\r\n        if(squares[pos]){\r\n            let win_array = [pos];\r\n            for (let win_streak = 1; win_streak < 5; win_streak++) {\r\n                const next_streak = pos + win_streak * (game_size + 1);\r\n                if (next_streak < squares.length\r\n                    && squares[pos] === squares[next_streak])\r\n                    win_array.push(next_streak); // append next streak location\r\n                else break;\r\n            }\r\n            if(win_array.length === 5){\r\n                return {\r\n                    winner: squares[pos],\r\n                    drawResult: false,\r\n                    winSquares: win_array\r\n                };\r\n            }\r\n        }\r\n    }\r\n    // Check secodary diagonal lines\r\n    let available_move = false;\r\n    for (let pos = 0; pos < squares.length; pos++){\r\n        if(squares[pos]){\r\n            let win_array = [pos];\r\n            for (let win_streak = 1; win_streak < 5; win_streak++) {\r\n                const next_streak = pos + win_streak * (game_size - 1);\r\n                if (next_streak < squares.length\r\n                    && squares[pos] === squares[next_streak])\r\n                    win_array.push(next_streak); // append next streak location\r\n                else break;\r\n            }\r\n            if(win_array.length === 5){\r\n                return {\r\n                    winner: squares[pos],\r\n                    drawResult: false,\r\n                    winSquares: win_array\r\n                };\r\n            }\r\n        }\r\n        else{\r\n            available_move = true;\r\n        }\r\n    }\r\n\r\n    return {\r\n        winner: null,\r\n        drawResult: !available_move,\r\n        winSquares: null\r\n    };\r\n}\r\n\r\nconst Game = ({gameboard_size}) => {\r\n    const [history, setHistory] = useState([\r\n        {\r\n            squares: Array(gameboard_size**2).fill(null)\r\n        }\r\n    ]);\r\n    const [stepNumber, setStepNumber] = useState(0);\r\n    const [xIsNext, setXIsNext] = useState(true);\r\n    const [AscMovelist, setAscMovelist] = useState(true);\r\n\r\n    const handleClick = (i) => {\r\n        const new_history = history.slice(0, stepNumber + 1);\r\n        const current = new_history[new_history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares).winner || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = xIsNext ? \"X\" : \"O\";\r\n\r\n        setHistory(new_history.concat([\r\n            {\r\n                squares: squares,\r\n                currentMove: i\r\n            }\r\n        ]));\r\n        setStepNumber(new_history.length);\r\n        setXIsNext(!xIsNext);\r\n    };\r\n    const jumpTo = (step) => {\r\n        setXIsNext((step % 2) === 0);\r\n        setStepNumber(step);\r\n    };\r\n    const changSortOrder = () => {\r\n        setAscMovelist(!AscMovelist);\r\n    };\r\n\r\n    const current = history[stepNumber];\r\n    const gameStatus = calculateWinner(current.squares);\r\n    const winner = gameStatus.winner;\r\n\r\n    let moves = history.map((step, move) => {\r\n        const col = step.currentMove % gameboard_size,\r\n            row = ~~(step.currentMove / gameboard_size),\r\n            desc = move ?\r\n                'Go to move #' + move +' [col: ' + col + ' - row: ' + row + ']' :\r\n                'Go to game start';\r\n        return (\r\n            <li key={move}>\r\n                <button\r\n                    className={move === stepNumber ? 'currently-selected-move-list' : ''}\r\n                    onClick={() => jumpTo(move)}>{desc}\r\n                </button>\r\n            </li>\r\n        );\r\n    });\r\n\r\n    let status = winner ?\r\n        \"Winner: \" + winner:\r\n        gameStatus.drawResult ?\r\n            \"Draw!!\":\r\n            \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n\r\n\r\n    // reverse movelist due to state setting\r\n    if(!AscMovelist)\r\n        moves.reverse();\r\n    return (\r\n        <div className=\"game\">\r\n            <div className=\"game-board\">\r\n                <Board\r\n                    squares={current.squares}\r\n                    onClick={i => handleClick(i)}\r\n                    winSquares={(gameStatus.winSquares)}\r\n                    board_size={gameboard_size}\r\n                />\r\n            </div>\r\n            <div className=\"game-info\">\r\n                <div>{status}</div>\r\n                <button\r\n                    onClick={() => changSortOrder()}>\r\n                    {AscMovelist ? 'Descending' : 'Ascending'}\r\n                </button>\r\n                <ol>{moves}</ol>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;","import React, {useState} from \"react\";\r\nimport Game from '../Game';\r\n\r\nconst Setup = () => {\r\n    const [gameSize, setGameSize] = useState(10);\r\n\r\n    return (\r\n        <div className=\"config\">\r\n            <div id=\"author\">\r\n                <h1>React tictactoe assignment 02</h1>\r\n                <p>by Phan Tan Dat - 18127078</p>\r\n            </div>\r\n\r\n            <div id = \"new_game\">\r\n                <Game gameboard_size={gameSize} />\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default Setup;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Setup from './components/Setup';\n\n\n\n\n\n// ========================================\n\nReactDOM.render(<Setup/>, document.getElementById(\"root\"));\n\n\n"],"sourceRoot":""}